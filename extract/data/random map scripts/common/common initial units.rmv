////////////////////////////////////////////////////////////////////
//
// Common Initial Units.rmv
//
// This rmv file describes the common initial units setup for most
// random maps.
//
// Copyright (c) 1998, Stainless Steel Studios, Inc. All rights reserved.
// PROPRIETARY and CONFIDENTIAL.
//
// $Author: Scott Marison $
// $Date: 8/06/01 6:57p $
// $Revision: 18 $
//  Revision: 5 Randomized herds
//  Revision: 6 Removed Chickens
//  Revision: 7 Added Walrus to Winter map
//
//////////////////////////////////////////////////////////////////////


#if			NOTDEFINED(COMMON_INITIAL_UNITS_RMV)
#define		(COMMON_INITIAL_UNITS_RMV,1)

#if			DEFINED(kGrassMap)


//////////////////////////////////////////////////////////////////////
// Animal units

//////////////////////////////////////////////////////////////////////
//Animals available to the random maps

AvailableAnimals			(Res-Deer, Res-Giraffe, Res-Goat, Res-Horse, Res-Wolf, Res-Elephant, Res-Hippopotamus, Res-Ostrich, Res-Tiger)

//////////////////////////////////////////////////////////////////////
// Animals available to be placed as herds

#define						(kDeerHerd,			10)
#define						(kGiraffeHerd,		11)
#define						(kElephantHerd,		12)
#define						(kGoatHerd,			13)
#define						(kOstrichHerd,		14)
#define						(kHippopotamusHerd, 15)
#define						(kHorseHerd,		16)

//////////////////////////////////////////////////////////////////////
// Animal herd/# in herd/Min. dist. From TC/Max. dist. From TC

DefineHerd	(kDeerHerd,		Res-Deer,		2,	7,	10)
DefineHerd	(kGiraffeHerd,	Res-Giraffe,	2,	7,	10)
DefineHerd	(kElephantHerd,	Res-Elephant,	2,	7,	10)
DefineHerd	(kGoatHerd,		Res-Goat,		2,	7,	10)
DefineHerd	(kOstrichHerd,	Res-Ostrich,	2,	7,	10)
DefineHerd	(kHippopotamusHerd, Res-Hippopotamus, 2,	7,	10)
DefineHerd	(kHorseHerd,	Res-Horse,		2,	7,	10)

//////////////////////////////////////////////////////////////////////
// Define a set of random herds from which to choose

DefineRandomHerdSet				(kDeerHerd, kGoatHerd, kGiraffeHerd, kElephantHerd, kHorseHerd, kHippopotamusHerd, kOstrichHerd)

/////////////////////////////////////////////////////////////////////
// Place non-random herds per player

//Commented out by RG
//HerdPerPlayer					(kDeerHerd,		0)
//HerdPerNeutral				(kGiraffeHerd,	0)

/////////////////////////////////////////////////////////////////////
// Place random herds per player.  Random herds in neutral land.

RandomHerdPerPlayer				2
RandomHerdPerNeutral			2


#elif		DEFINED(kWinterMap)


//////////////////////////////////////////////////////////////////////
// Animal units

//////////////////////////////////////////////////////////////////////
//Animals available to the random maps

AvailableAnimals			(Res-Deer, Res-Goat, Res-Walrus, Res-Wolf)

//////////////////////////////////////////////////////////////////////
// Animals available to be placed as herds

#define						(kDeerHerd,			10)
#define						(kGoatHerd,			13)
#define						(kWalrusHerd,		16)

//////////////////////////////////////////////////////////////////////
// Animal herd/# in herd/Min. dist. From TC/Max. dist. From TC

DefineHerd	(kDeerHerd,		Res-Deer,		2,	7,	10)
DefineHerd	(kGoatHerd,		Res-Goat,		2,	7,	10)
DefineHerd	(kWalrusHerd,	Res-Walrus,		2,	7,	10)

//////////////////////////////////////////////////////////////////////
// Define a set of random herds from which to choose

DefineRandomHerdSet				(kDeerHerd, kGoatHerd, kWalrusHerd)

/////////////////////////////////////////////////////////////////////
// Place non-random herds per player

//Commented out by RG
//HerdPerPlayer					(kDeerHerd,		0)
//HerdPerNeutral				(kGiraffeHerd,	0)

/////////////////////////////////////////////////////////////////////
// Place random herds per player.  Random herds in neutral land.

RandomHerdPerPlayer				2
RandomHerdPerNeutral			2


#elif		DEFINED(kDesertMap)


//////////////////////////////////////////////////////////////////////
// Animal units

//////////////////////////////////////////////////////////////////////
//Animals available to the random maps

AvailableAnimals			(Res-Giraffe, Res-Goat, Res-Horse, Res-Elephant, Res-Hippopotamus, Res-Ostrich, Res-Tiger)

//////////////////////////////////////////////////////////////////////
// Animals available to be placed as herds

#define						(kGiraffeHerd,		11)
#define						(kElephantHerd,		12)
#define						(kGoatHerd,			13)
#define						(kOstrichHerd,		14)
#define						(kHippopotamusHerd, 15)
#define						(kHorseHerd,		16)

//////////////////////////////////////////////////////////////////////
// Animal herd/# in herd/Min. dist. From TC/Max. dist. From TC

DefineHerd	(kGiraffeHerd,		Res-Giraffe,		2,	7,	10)
DefineHerd	(kElephantHerd,		Res-Elephant,		2,	7,	10)
DefineHerd	(kGoatHerd,			Res-Goat,			2,	7,	10)
DefineHerd	(kOstrichHerd,		Res-Ostrich,		2,	7,	10)
DefineHerd	(kHippopotamusHerd, Res-Hippopotamus,	2,	7,	10)
DefineHerd	(kHorseHerd,		Res-Horse,			2,	7,	10)

//////////////////////////////////////////////////////////////////////
// Define a set of random herds from which to choose

DefineRandomHerdSet				(kGoatHerd, kGiraffeHerd, kElephantHerd, kHorseHerd, kHippopotamusHerd, kOstrichHerd)

/////////////////////////////////////////////////////////////////////
// Place non-random herds per player

//Commented out by RG
//HerdPerPlayer					(kDeerHerd,		0)
//HerdPerNeutral				(kGiraffeHerd,	0)

/////////////////////////////////////////////////////////////////////
// Place random herds per player.  Random herds in neutral land.

RandomHerdPerPlayer				2
RandomHerdPerNeutral			2


#endif		// DEFINED(kGrassMap)



//////////////////////////////////////////////////////////////////////
// Initial units		
//
// The common set of initial units is a capitol plus 20 citizens. the 
// actual number of citizens placed on the map is affected by the citizen
// handicap specified in the UI of the game.
// 
//						unit type			x		y		yaw
PlaceUnit				(bCapitol,			-0.5,	-0.5)

// first row on south side of building
PlaceUnit				(Citizen,			-1,		-1.5,	180)
PlaceUnit				(FemaleCitizen,		-0.5,	-1.5,	180)

PlaceUnit				(Citizen,			0,		-1.5,	180)
PlaceUnit				(FemaleCitizen,		0.5,	-1.5,	180)

PlaceUnit				(Citizen,			1,		-1.5,	180)

// first row on east side of building
PlaceUnit				(FemaleCitizen,		1.5,	-1,		-90)
PlaceUnit				(Citizen,			1.5,	-0.5,	-90)

PlaceUnit				(FemaleCitizen,		1.5,	0,		-90)
PlaceUnit				(Citizen,			1.5,	0.5,	-90)

PlaceUnit				(FemaleCitizen,		1.5,	1,		-90)

// second row on south side of building
PlaceUnit				(Citizen,			-1,		-2,		180)
PlaceUnit				(FemaleCitizen,		-0.5,	-2,		180)
															
PlaceUnit				(Citizen,			0,		-2,		180)
PlaceUnit				(FemaleCitizen,		0.5,	-2,		180)
															
PlaceUnit				(Citizen,			1,		-2,		180)

// second row on east side of building
PlaceUnit				(FemaleCitizen,		2,		-1,		-90)
PlaceUnit				(Citizen,			2,		-0.5,	-90)
													
PlaceUnit				(FemaleCitizen,		2,		0,		-90)
PlaceUnit				(Citizen,			2,		0.5,	-90)
													
PlaceUnit				(FemaleCitizen,		2,		1,		-90)


#endif		// NOTDEFINED(COMMON_INITIAL_UNITS_RMV)
